<?php

/**
 * 
 * Builder of DBFile_File concrete instances.
 * @package     DBFile
 * @subpackage  File
 * @abstract
 * @author      Julio Mora <julio.mora.zamora@gmail.com>
 */
abstract class DBFile_File_Builder 
{//------------------------->> Class Builder
    
    /**
     * 
     * Retrieves info of a file by its path and builds a DBFile_File
     * instance with it.
     * <p>A DBFile_Exception will be thrown if the file doesn't exists.</p>
     * @static
     * @param   string $filePath Path where the original file is located.
     * @return  DBFile_File
     * @throws  DBFile_Exception
     */
    public static function getFileFromPath( $filePath ) 
    {//-------------------->> getFileFromPath()
        
        if ( !file_exists( $filePath ) ) {//---------->> if file doesn't exist
            throw new DBFile_Exception( "The File {$filePath} doesn't exists" );
        }//---------->> End if file doesn't exist
        
        $file = new DBFile_File();
        
        $file->setPath( $filePath );
        $file->setName( basename( $filePath ) );
        $file->setSize( filesize( $filePath ) );
        
        $fileInf = new finfo( FILEINFO_MIME_TYPE );
        $file->setType( $fileInf->file( $filePath ) );
        
        $file->setContent( file_get_contents( $filePath ) );
        
        return $file;
        
    }//-------------------->> End getFileFromPath()
    
    /**
     * 
     * Builds a DBFile_File instance from a $_FILE associative array structure.
     * <p>A DBFile_Exception will be thrown if the file doesn't exists.</p>
     * @param   array $postFile $_FILE Associative Array structure:
     * <table border=1>
     *  <tr>
     *      <th>Key</th><th>Type</th><th>Description</th>
     *  </tr>
     *  <tr>
     *      <td>tmp_name</td><td>string</td><td>Temporal Path where the original file is located</td>
     *  </tr>
     *  <tr>
     *      <td>name</td><td>string</td><td>Base name of the file</td>
     *  </tr>
     *  <tr>
     *      <td>size</td><td>int</td><td>Size of the file in Bytes</td>
     *  </tr>
     *  <tr>
     *      <td>type</td><td>string</td><td>Mime-type of the file</td>
     *  </tr>
     * </table> 
     * @static
     * @throws  DBFile_Exception
     * @return  DBFile_File
     * @example DBFile_File_Builder::getFileFromPostFile( $_FILE[ 'fileName' ] );
     */
    public static function getFileFromPostFile( array $postFile )
    {//-------------------->> getFileFromPostFile()
        
        if ( !isset( $postFile[ 'tmp_name' ] ) || !file_exists( $postFile[ 'tmp_name' ] ) ) {//---------->> if file doesn't exist
            throw new DBFile_Exception( "The File {$postFile[ 'tmp_name' ]} doesn't exists" );
        }//---------->> End if file doesn't exist
        
        $file = new DBFile_File();
        $file->setPath( $postFile[ 'tmp_name' ] );
        $file->setName( $postFile[ 'name' ] );
        $file->setSize( $postFile[ 'size' ] );
        $file->setType( $postFile[ 'type' ] );
        $file->setContent( file_get_contents( $postFile[ 'tmp_name' ] ) );
        
        return $file;
        
    }//-------------------->> End getFileFromPostFile()
    
    /**
     * 
     * Builds a DBFile_File instance from a DB associative array structure.
     * <p>
     *  In the DBFile_File instances generated by this method, the path property will 
     *  be setted as DB . DIRECTORY_SEPARATOR. $resultSet[ 'id' ] in order to indicate
     *  that this file is located inside a Data Base Table.
     * </p>
     * @static
     * @param   array $resultSet DBFile Result Set Default Associative Array structure:
     * <table border=1>
     *  <tr>
     *      <th>Key</th><th>Type</th><th>Description</th>
     *  </tr>
     *  <tr>
     *      <td>id</td><td>int</td><td>ID of the File in the DB Table</td>
     *  </tr>
     *  <tr>
     *      <td>name</td><td>string</td><td>Base name of the file</td>
     *  </tr>
     *  <tr>
     *      <td>size</td><td>int</td><td>Size of the file in Bytes</td>
     *  </tr>
     *  <tr>
     *      <td>mime_type</td><td>string</td><td>Mime-type of the file</td>
     *  </tr>
     *  <tr>
     *      <td>content</td><td>string</td><td>Content of the file as binary string</td>
     *  </tr>
     * </table> 
     * @return  DBFile_File
     */
    public static function getFileFromResultSet( array $resultSet )
    {//-------------------->> getFileFromResultSet()
        
        $file = new DBFile_File();
        $file->setPath( 'DB' . DIRECTORY_SEPARATOR . $resultSet[ 'id' ] );
        $file->setName( $resultSet[ 'name' ] );
        $file->setSize( $resultSet[ 'size' ] );
        $file->setType( $resultSet[ 'mime_type' ] );
        $file->setContent( $resultSet[ 'content' ] );
        
        return $file;
        
    }//-------------------->> End getFileFromResultSet()
    
}//------------------------->> End Class Builder